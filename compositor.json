{
  "name": "bradatwater/javascript",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.25"
  },
  "title": "",
  "branch": "",
  "style": {
    "name": "Future",
    "componentSet": {
      "nav": "nav/BasicNav",
      "header": "header/BannerHeader",
      "article": "article/BasicArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "\"Avenir Next\", Helvetica, sans-serif",
    "heading": {
      "fontWeight": 500,
      "textTransform": "uppercase",
      "letterSpacing": "0.2em"
    },
    "alternativeText": {
      "textTransform": "uppercase",
      "fontWeight": 400,
      "letterSpacing": "0.2em",
      "opacity": 0.75
    },
    "colors": {
      "text": "#333",
      "background": "#fff",
      "primary": "#666",
      "secondary": "#888",
      "highlight": "#1f80ff",
      "muted": "#f6f6f6",
      "border": "#eee"
    },
    "layout": {
      "centered": true,
      "maxWidth": 1024,
      "bannerHeight": "80vh"
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "https://github.com/bradatwater/javascript",
          "text": "GitHub"
        }
      ]
    },
    {
      "component": "header",
      "heading": "javascript",
      "subhead": "JavaScript Style Guide",
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "javascript: JavaScript Style Guide",
          "url": null
        },
        {
          "component": "ui/GithubButton",
          "user": "bradatwater",
          "repo": "javascript"
        }
      ]
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "<h1>Airbnb JavaScript Style Guide() {</h1>\n<p><em>A mostly reasonable approach to JavaScript</em></p>\n<h2><a name=\"TOC\">Table of Contents</a></h2>\n<ol>\n<li><a href=\"#types\">Types</a></li>\n<li><a href=\"#objects\">Objects</a></li>\n<li><a href=\"#arrays\">Arrays</a></li>\n<li><a href=\"#strings\">Strings</a></li>\n<li><a href=\"#functions\">Functions</a></li>\n<li><a href=\"#properties\">Properties</a></li>\n<li><a href=\"#variables\">Variables</a></li>\n<li><a href=\"#hoisting\">Hoisting</a></li>\n<li><a href=\"#conditionals\">Conditional Expressions &amp; Equality</a></li>\n<li><a href=\"#blocks\">Blocks</a></li>\n<li><a href=\"#comments\">Comments</a></li>\n<li><a href=\"#whitespace\">Whitespace</a></li>\n<li><a href=\"#leading-commas\">Leading Commas</a></li>\n<li><a href=\"#semicolons\">Semicolons</a></li>\n<li><a href=\"#type-coercion\">Type Casting &amp; Coercion</a></li>\n<li><a href=\"#naming-conventions\">Naming Conventions</a></li>\n<li><a href=\"#accessors\">Accessors</a></li>\n<li><a href=\"#constructors\">Constructors</a></li>\n<li><a href=\"#modules\">Modules</a></li>\n<li><a href=\"#jquery\">jQuery</a></li>\n<li><a href=\"#es5\">ES5 Compatibility</a></li>\n<li><a href=\"#testing\">Testing</a></li>\n<li><a href=\"#performance\">Performance</a></li>\n<li><a href=\"#resources\">Resources</a></li>\n<li><a href=\"#in-the-wild\">In the Wild</a></li>\n<li><a href=\"#guide-guide\">The JavaScript Style Guide Guide</a></li>\n<li><a href=\"#contributors\">Contributors</a></li>\n<li><a href=\"#license\">License</a></li>\n</ol>\n<h2><a name=\"types\">Types</a></h2>\n<ul>\n<li><p><strong>Primitives</strong>: When you access a primitive type you work directly on its value</p>\n<ul>\n<li><code>string</code></li>\n<li><code>number</code></li>\n<li><code>boolean</code></li>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n</ul>\n<pre><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-number\">1</span>,\n    bar = foo;\n\nbar = <span class=\"hljs-number\">9</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(foo, bar); <span class=\"hljs-comment\">// =&gt; 1, 9</span></pre></li>\n<li><p><strong>Complex</strong>: When you access a complex type you work on a reference to its value</p>\n<ul>\n<li><code>object</code></li>\n<li><code>array</code></li>\n<li><code>function</code></li>\n</ul>\n<pre><span class=\"hljs-keyword\">var</span> foo = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>],\n    bar = foo;\n\nbar[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">9</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(foo[<span class=\"hljs-number\">0</span>], bar[<span class=\"hljs-number\">0</span>]); <span class=\"hljs-comment\">// =&gt; 9, 9</span></pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"objects\">Objects</a></h2>\n<ul>\n<li><p>Use the literal syntax for object creation.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> item = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>();\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> item = {};</pre></li>\n<li><p>Don&apos;t use <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Reserved_Words\">reserved words</a> as keys.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> superman = {\n  <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&apos;superhero&apos;</span>,\n  <span class=\"hljs-attr\">default</span>: { <span class=\"hljs-attr\">clark</span>: <span class=\"hljs-string\">&apos;kent&apos;</span> },\n  <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span>\n};\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> superman = {\n  <span class=\"hljs-attr\">klass</span>: <span class=\"hljs-string\">&apos;superhero&apos;</span>,\n  <span class=\"hljs-attr\">defaults</span>: { <span class=\"hljs-attr\">clark</span>: <span class=\"hljs-string\">&apos;kent&apos;</span> },\n  <span class=\"hljs-attr\">hidden</span>: <span class=\"hljs-literal\">true</span>\n};</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"arrays\">Arrays</a></h2>\n<ul>\n<li><p>Use the literal syntax for array creation</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> items = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>();\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> items = [];</pre></li>\n<li><p>When you are managing array length use direct assignment over Array#push. <a href=\"http://jsperf.com/array-direct-assignment-vs-push/11\">jsPerf</a></p>\n<pre><span class=\"hljs-keyword\">var</span> hundredOdds = [],\n    i;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) {\n  hundredOdds.push(i * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>);\n}\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) {\n  hundredOdds[i] = i * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>;\n}</pre></li>\n<li><p>If you don&apos;t know array length use Array#push.</p>\n<p>```javascript\nvar someStack = [];</p>\n</li>\n</ul>\n<pre><span class=\"hljs-comment\">// bad</span>\nsomeStack[someStack.length] = <span class=\"hljs-string\">&apos;abracadabra&apos;</span>;\n\n<span class=\"hljs-comment\">// good</span>\nsomeStack.push(<span class=\"hljs-string\">&apos;abracadabra&apos;</span>);\n```</pre><ul>\n<li><p>When you need to copy an array use Array() constructor. <a href=\"http://jsperf.com/converting-arguments-to-an-array/7\">jsPerf</a></p>\n<pre><span class=\"hljs-keyword\">var</span> len = items.length,\n    itemsCopy = [],\n    i;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n  itemsCopy[i] = items[i];\n}\n\n<span class=\"hljs-comment\">// good</span>\nitemsCopy = <span class=\"hljs-built_in\">Array</span>.apply(<span class=\"hljs-literal\">null</span>, items);</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"strings\">Strings</a></h2>\n<ul>\n<li><p>Use single quotes <code>&apos;&apos;</code> for strings</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&quot;Bob Parr&quot;</span>;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&apos;Bob Parr&apos;</span>;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> fullName = <span class=\"hljs-string\">&quot;Bob &quot;</span> + <span class=\"hljs-keyword\">this</span>.lastName;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> fullName = <span class=\"hljs-string\">&apos;Bob &apos;</span> + <span class=\"hljs-keyword\">this</span>.lastName;</pre></li>\n<li><p>Strings longer than 80 characters should be written across multiple lines using string concatenation.</p>\n</li>\n<li><p>Note: If overused, long strings with concatenation could impact performance. <a href=\"http://jsperf.com/ya-string-concat\">jsPerf</a> &amp; <a href=\"https://github.com/airbnb/javascript/issues/40\">Discussion</a></p>\n<p>```javascript\n// bad\nvar errorMessage = &apos;This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.&apos;;</p>\n<p>// bad\nvar errorMessage = &apos;This is a super long error that \\\nwas thrown because of Batman. \\\nWhen you stop to think about \\\nhow Batman had anything to do \\\nwith this, you would get nowhere \\\nfast.&apos;;</p>\n</li>\n</ul>\n<pre>// good\nvar errorMessage = <span class=\"hljs-symbol\">&apos;This</span> <span class=\"hljs-keyword\">is</span> a super long <span class=\"hljs-literal\">error</span> that &apos; +\n  <span class=\"hljs-symbol\">&apos;was</span> thrown because <span class=\"hljs-keyword\">of</span> Batman.&apos; +\n  <span class=\"hljs-symbol\">&apos;When</span> you stop <span class=\"hljs-keyword\">to</span> think about &apos; +\n  <span class=\"hljs-symbol\">&apos;how</span> Batman had anything <span class=\"hljs-keyword\">to</span> do &apos; +\n  <span class=\"hljs-symbol\">&apos;with</span> this, you would get nowhere &apos; +\n  <span class=\"hljs-symbol\">&apos;fast</span>.&apos;;\n```</pre><ul>\n<li><p>When programatically building up a string, use Array#join instead of string concatenation. Mostly for IE: <a href=\"http://jsperf.com/string-vs-array-concat/2\">jsPerf</a>.</p>\n<pre><span class=\"hljs-keyword\">var</span> items,\n    messages,\n    length, i;\n\nmessages = [{\n    <span class=\"hljs-attr\">state</span>: <span class=\"hljs-string\">&apos;success&apos;</span>,\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&apos;This one worked.&apos;</span>\n},{\n    <span class=\"hljs-attr\">state</span>: <span class=\"hljs-string\">&apos;success&apos;</span>,\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&apos;This one worked as well.&apos;</span>\n},{\n    <span class=\"hljs-attr\">state</span>: <span class=\"hljs-string\">&apos;error&apos;</span>,\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&apos;This one did not work.&apos;</span>\n}];\n\nlength = messages.length;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inbox</span>(<span class=\"hljs-params\">messages</span>) </span>{\n  items = <span class=\"hljs-string\">&apos;&lt;ul&gt;&apos;</span>;\n\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; length; i++) {\n    items += <span class=\"hljs-string\">&apos;&lt;li&gt;&apos;</span> + messages[i].message + <span class=\"hljs-string\">&apos;&lt;/li&gt;&apos;</span>;\n  }\n\n  <span class=\"hljs-keyword\">return</span> items + <span class=\"hljs-string\">&apos;&lt;/ul&gt;&apos;</span>;\n}\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inbox</span>(<span class=\"hljs-params\">messages</span>) </span>{\n  items = [];\n\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; length; i++) {\n    items[i] = messages[i].message;\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&apos;&lt;ul&gt;&lt;li&gt;&apos;</span> + items.join(<span class=\"hljs-string\">&apos;&lt;/li&gt;&lt;li&gt;&apos;</span>) + <span class=\"hljs-string\">&apos;&lt;/li&gt;&lt;/ul&gt;&apos;</span>;\n}</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"functions\">Functions</a></h2>\n<ul>\n<li><p>Function expressions:</p>\n<pre><span class=\"hljs-comment\">// anonymous function expression</span>\n<span class=\"hljs-keyword\">var</span> anonymous = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n};\n\n<span class=\"hljs-comment\">// named function expression</span>\n<span class=\"hljs-keyword\">var</span> named = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">named</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n};\n\n<span class=\"hljs-comment\">// immediately-invoked function expression (IIFE)</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;Welcome to the Internet. Please follow me.&apos;</span>);\n})();</pre></li>\n<li><p>Never declare a function in a non-function block (if, while, etc). Assign the function to a variable instead. Browsers will allow you to do it, but they all interpret it differently, which is bad news bears.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">if</span> (currentUser) {\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;Nope.&apos;</span>);\n  }\n}\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">if</span> (currentUser) {\n  <span class=\"hljs-keyword\">var</span> test = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;Yup.&apos;</span>);\n  };\n}</pre></li>\n<li><p>Never name a parameter <code>arguments</code>, this will take precendence over the <code>arguments</code> object that is given to every function scope.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">nope</span>(<span class=\"hljs-params\">name, options, arguments</span>) </span>{\n  <span class=\"hljs-comment\">// ...stuff...</span>\n}\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">yup</span>(<span class=\"hljs-params\">name, options, args</span>) </span>{\n  <span class=\"hljs-comment\">// ...stuff...</span>\n}</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"properties\">Properties</a></h2>\n<ul>\n<li><p>Use dot notation when accessing properties.</p>\n<pre><span class=\"hljs-keyword\">var</span> luke = {\n  <span class=\"hljs-attr\">jedi</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">28</span>\n};\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> isJedi = luke[<span class=\"hljs-string\">&apos;jedi&apos;</span>];\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> isJedi = luke.jedi;</pre></li>\n<li><p>Use subscript notation <code>[]</code> when accessing properties with a variable.</p>\n<pre><span class=\"hljs-keyword\">var</span> luke = {\n  <span class=\"hljs-attr\">jedi</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">28</span>\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getProp</span>(<span class=\"hljs-params\">prop</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> luke[prop];\n}\n\n<span class=\"hljs-keyword\">var</span> isJedi = getProp(<span class=\"hljs-string\">&apos;jedi&apos;</span>);</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"variables\">Variables</a></h2>\n<ul>\n<li><p>Always use <code>var</code> to declare variables. Not doing so will result in global variables. We want to avoid polluting the global namespace. Captain Planet warned us of that.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\nsuperPower = <span class=\"hljs-keyword\">new</span> SuperPower();\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> superPower = <span class=\"hljs-keyword\">new</span> SuperPower();</pre></li>\n<li><p>Use one <code>var</code> declaration for multiple variables and declare each variable on a newline.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> items = getItems();\n<span class=\"hljs-keyword\">var</span> goSportsTeam = <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-keyword\">var</span> dragonball = <span class=\"hljs-string\">&apos;z&apos;</span>;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> items = getItems(),\n    goSportsTeam = <span class=\"hljs-literal\">true</span>,\n    dragonball = <span class=\"hljs-string\">&apos;z&apos;</span>;</pre></li>\n<li><p>Declare unassigned variables last. This is helpful when later on you might need to assign a variable depending on one of the previous assigned variables.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> i, len, dragonball,\n    items = getItems(),\n    goSportsTeam = <span class=\"hljs-literal\">true</span>;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> i, items = getItems(),\n    dragonball,\n    goSportsTeam = <span class=\"hljs-literal\">true</span>,\n    len;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> items = getItems(),\n    goSportsTeam = <span class=\"hljs-literal\">true</span>,\n    dragonball,\n    i, length;</pre></li>\n<li><p>Assign variables at the top of their scope. This helps avoid issues with variable declaration and assignment hoisting related issues.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  test();\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;doing stuff..&apos;</span>);\n\n  <span class=\"hljs-comment\">//..other stuff..</span>\n\n  <span class=\"hljs-keyword\">var</span> name = getName();\n\n  <span class=\"hljs-keyword\">if</span> (name === <span class=\"hljs-string\">&apos;test&apos;</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-keyword\">return</span> name;\n}\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> name = getName();\n\n  test();\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;doing stuff..&apos;</span>);\n\n  <span class=\"hljs-comment\">//..other stuff..</span>\n\n  <span class=\"hljs-keyword\">if</span> (name === <span class=\"hljs-string\">&apos;test&apos;</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-keyword\">return</span> name;\n}\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> name = getName();\n\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">arguments</span>.length) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">arguments</span>.length) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-keyword\">var</span> name = getName();\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"hoisting\">Hoisting</a></h2>\n<ul>\n<li><p>Variable declarations get hoisted to the top of their scope, their assignment does not.</p>\n<pre><span class=\"hljs-comment\">// we know this wouldn&apos;t work (assuming there</span>\n<span class=\"hljs-comment\">// is no notDefined global variable)</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">example</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(notDefined); <span class=\"hljs-comment\">// =&gt; throws a ReferenceError</span>\n}\n\n<span class=\"hljs-comment\">// creating a variable declaration after you</span>\n<span class=\"hljs-comment\">// reference the variable will work due to</span>\n<span class=\"hljs-comment\">// variable hoisting. Note: the assignment</span>\n<span class=\"hljs-comment\">// value of `true` is not hoisted.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">example</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(declaredButNotAssigned); <span class=\"hljs-comment\">// =&gt; undefined</span>\n  <span class=\"hljs-keyword\">var</span> declaredButNotAssigned = <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-comment\">// The interpretor is hoisting the variable</span>\n<span class=\"hljs-comment\">// declaration to the top of the scope.</span>\n<span class=\"hljs-comment\">// Which means our example could be rewritten as:</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">example</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> declaredButNotAssigned;\n  <span class=\"hljs-built_in\">console</span>.log(declaredButNotAssigned); <span class=\"hljs-comment\">// =&gt; undefined</span>\n  declaredButNotAssigned = <span class=\"hljs-literal\">true</span>;\n}</pre></li>\n<li><p>Anonymous function expression hoist their variable name, but not the function assignment.</p>\n<pre><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">example</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(anonymous); <span class=\"hljs-comment\">// =&gt; undefined</span>\n\n  anonymous(); <span class=\"hljs-comment\">// =&gt; TypeError anonymous is not a function</span>\n\n  <span class=\"hljs-keyword\">var</span> anonymous = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;anonymous function expression&apos;</span>);\n  };\n}</pre></li>\n<li><p>Named function expressions hoist the variable name, not the function name or the function body.</p>\n<p>```javascript\nfunction example() {\n  console.log(named); // =&gt; undefined</p>\n<p>  named(); // =&gt; TypeError named is not a function</p>\n<p>  superPower(); // =&gt; ReferenceError superPower is not defined</p>\n<p>  var named = function superPower() {</p>\n<pre>console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&apos;Flying&apos;</span>)<span class=\"hljs-comment\">;</span></pre><p>  };</p>\n</li>\n</ul>\n<pre>  <span class=\"hljs-comment\">// the same is true when the function name</span>\n  <span class=\"hljs-comment\">// is the same as the variable name.</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">example</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(named); <span class=\"hljs-comment\">// =&gt; undefined</span>\n\n    named(); <span class=\"hljs-comment\">// =&gt; TypeError named is not a function</span>\n\n    <span class=\"hljs-keyword\">var</span> named = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">named</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;named&apos;</span>);\n    };\n  }\n}\n<span class=\"hljs-string\">``</span><span class=\"hljs-string\">`</span></pre><ul>\n<li><p>Function declarations hoist their name and the function body.</p>\n<pre><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">example</span>(<span class=\"hljs-params\"></span>) </span>{\n  superPower(); <span class=\"hljs-comment\">// =&gt; Flying</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">superPower</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;Flying&apos;</span>);\n  }\n}</pre></li>\n<li><p>For more information refer to <a href=\"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting\">JavaScript Scoping &amp; Hoisting</a> by <a href=\"http://www.adequatelygood.com/\">Ben Cherry</a></p>\n<p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"conditionals\">Conditional Expressions &amp; Equality</a></h2>\n<ul>\n<li>Use <code>===</code> and <code>!==</code> over <code>==</code> and <code>!=</code>.</li>\n<li><p>Conditional expressions are evaluated using coercion with the <code>ToBoolean</code> method and always follow these simple rules:</p>\n<ul>\n<li><strong>Objects</strong> evaluate to <strong>true</strong></li>\n<li><strong>Undefined</strong> evaluates to <strong>false</strong></li>\n<li><strong>Null</strong> evaluates to <strong>false</strong></li>\n<li><strong>Booleans</strong> evaluate to <strong>the value of the boolean</strong></li>\n<li><strong>Numbers</strong> evalute to <strong>false</strong> if <strong>+0, -0, or NaN</strong>, otherwise <strong>true</strong></li>\n<li><strong>Strings</strong> evaluate to <strong>false</strong> if an empty string <code>&apos;&apos;</code>, otherwise <strong>true</strong></li>\n</ul>\n<pre><span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-number\">0</span>]) {\n  <span class=\"hljs-comment\">// true</span>\n  <span class=\"hljs-comment\">// An array is an object, objects evaluate to true</span>\n}</pre></li>\n<li><p>Use shortcuts.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">if</span> (name !== <span class=\"hljs-string\">&apos;&apos;</span>) {\n  <span class=\"hljs-comment\">// ...stuff...</span>\n}\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">if</span> (name) {\n  <span class=\"hljs-comment\">// ...stuff...</span>\n}\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">if</span> (collection.length &gt; <span class=\"hljs-number\">0</span>) {\n  <span class=\"hljs-comment\">// ...stuff...</span>\n}\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">if</span> (collection.length) {\n  <span class=\"hljs-comment\">// ...stuff...</span>\n}</pre></li>\n<li><p>For more information see <a href=\"http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108\">Truth Equality and JavaScript</a> by Angus Croll</p>\n<p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"blocks\">Blocks</a></h2>\n<ul>\n<li><p>Use braces with all multi-line blocks.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">if</span> (test)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">if</span> (test) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">if</span> (test) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; }\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"comments\">Comments</a></h2>\n<ul>\n<li><p>Use <code>/** ... */</code> for multiline comments. Include a description, specify types and values for all parameters and return values.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-comment\">// make() returns a new element</span>\n<span class=\"hljs-comment\">// based on the passed in tag name</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// @param &lt;String&gt; tag</span>\n<span class=\"hljs-comment\">// @return &lt;Element&gt; element</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">make</span>(<span class=\"hljs-params\">tag</span>) </span>{\n\n  <span class=\"hljs-comment\">// ...stuff...</span>\n\n  <span class=\"hljs-keyword\">return</span> element;\n}\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-comment\">/**\n * make() returns a new element\n * based on the passed in tag name\n *\n * @param &lt;String&gt; tag\n * @return &lt;Element&gt; element\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">make</span>(<span class=\"hljs-params\">tag</span>) </span>{\n\n  <span class=\"hljs-comment\">// ...stuff...</span>\n\n  <span class=\"hljs-keyword\">return</span> element;\n}</pre></li>\n<li><p>Use <code>//</code> for single line comments. Place single line comments on a newline above the subject of the comment. Put an emptyline before the comment.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> active = <span class=\"hljs-literal\">true</span>;  <span class=\"hljs-comment\">// is current tab</span>\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-comment\">// is current tab</span>\n<span class=\"hljs-keyword\">var</span> active = <span class=\"hljs-literal\">true</span>;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getType</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;fetching type...&apos;</span>);\n  <span class=\"hljs-comment\">// set the default type to &apos;no type&apos;</span>\n  <span class=\"hljs-keyword\">var</span> type = <span class=\"hljs-keyword\">this</span>._type || <span class=\"hljs-string\">&apos;no type&apos;</span>;\n\n  <span class=\"hljs-keyword\">return</span> type;\n}\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getType</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;fetching type...&apos;</span>);\n\n  <span class=\"hljs-comment\">// set the default type to &apos;no type&apos;</span>\n  <span class=\"hljs-keyword\">var</span> type = <span class=\"hljs-keyword\">this</span>._type || <span class=\"hljs-string\">&apos;no type&apos;</span>;\n\n  <span class=\"hljs-keyword\">return</span> type;\n}</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"whitespace\">Whitespace</a></h2>\n<ul>\n<li><p>Use soft tabs set to 2 spaces</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n&#x2219;&#x2219;&#x2219;&#x2219;<span class=\"hljs-keyword\">var</span> name;\n}\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n&#x2219;<span class=\"hljs-keyword\">var</span> name;\n}\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n&#x2219;&#x2219;<span class=\"hljs-keyword\">var</span> name;\n}</pre></li>\n<li><p>Place 1 space before the leading brace.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;test&apos;</span>);\n}\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;test&apos;</span>);\n}\n\n<span class=\"hljs-comment\">// bad</span>\ndog.set(<span class=\"hljs-string\">&apos;attr&apos;</span>,{\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-string\">&apos;1 year&apos;</span>,\n  <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-string\">&apos;Bernese Mountain Dog&apos;</span>\n});\n\n<span class=\"hljs-comment\">// good</span>\ndog.set(<span class=\"hljs-string\">&apos;attr&apos;</span>, {\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-string\">&apos;1 year&apos;</span>,\n  <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-string\">&apos;Bernese Mountain Dog&apos;</span>\n});</pre></li>\n<li><p>Place an empty newline at the end of the file.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">global</span>) </span>{\n  <span class=\"hljs-comment\">// ...stuff...</span>\n})(<span class=\"hljs-keyword\">this</span>);</pre><pre><span class=\"hljs-comment\">// good</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">global</span>) </span>{\n  <span class=\"hljs-comment\">// ...stuff...</span>\n})(<span class=\"hljs-keyword\">this</span>);</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n<li><p>Use indentation when making long method chains.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n$(<span class=\"hljs-string\">&apos;#items&apos;</span>).find(<span class=\"hljs-string\">&apos;.selected&apos;</span>).highlight().end().find(<span class=\"hljs-string\">&apos;.open&apos;</span>).updateCount();\n\n<span class=\"hljs-comment\">// good</span>\n$(<span class=\"hljs-string\">&apos;#items&apos;</span>)\n.find(<span class=\"hljs-string\">&apos;.selected&apos;</span>)\n  .highlight()\n  .end()\n.find(<span class=\"hljs-string\">&apos;.open&apos;</span>)\n  .updateCount();\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> leds = stage.selectAll(<span class=\"hljs-string\">&apos;.led&apos;</span>).data(data).enter().append(<span class=\"hljs-string\">&quot;svg:svg&quot;</span>).class(<span class=\"hljs-string\">&apos;led&apos;</span>, <span class=\"hljs-literal\">true</span>)\n  .attr(<span class=\"hljs-string\">&apos;width&apos;</span>,  (radius + margin) * <span class=\"hljs-number\">2</span>).append(<span class=\"hljs-string\">&quot;svg:g&quot;</span>)\n  .attr(<span class=\"hljs-string\">&quot;transform&quot;</span>, <span class=\"hljs-string\">&quot;translate(&quot;</span> + (radius + margin) + <span class=\"hljs-string\">&quot;,&quot;</span> + (radius + margin) + <span class=\"hljs-string\">&quot;)&quot;</span>)\n  .call(tron.led);\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> leds = stage.selectAll(<span class=\"hljs-string\">&apos;.led&apos;</span>)\n  .data(data)\n.enter().append(<span class=\"hljs-string\">&quot;svg:svg&quot;</span>)\n  .class(<span class=\"hljs-string\">&apos;led&apos;</span>, <span class=\"hljs-literal\">true</span>)\n  .attr(<span class=\"hljs-string\">&apos;width&apos;</span>,  (radius + margin) * <span class=\"hljs-number\">2</span>)\n.append(<span class=\"hljs-string\">&quot;svg:g&quot;</span>)\n  .attr(<span class=\"hljs-string\">&quot;transform&quot;</span>, <span class=\"hljs-string\">&quot;translate(&quot;</span> + (radius + margin) + <span class=\"hljs-string\">&quot;,&quot;</span> + (radius + margin) + <span class=\"hljs-string\">&quot;)&quot;</span>)\n  .call(tron.led);</pre></li>\n</ul>\n<h2><a name=\"leading-commas\">Leading Commas</a></h2>\n<ul>\n<li><p><strong>Nope.</strong></p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> once\n  , upon\n  , aTime;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> once,\n    upon,\n    aTime;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> hero = {\n    <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">&apos;Bob&apos;</span>\n  , <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">&apos;Parr&apos;</span>\n  , <span class=\"hljs-attr\">heroName</span>: <span class=\"hljs-string\">&apos;Mr. Incredible&apos;</span>\n  , <span class=\"hljs-attr\">superPower</span>: <span class=\"hljs-string\">&apos;strength&apos;</span>\n};\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> hero = {\n  <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">&apos;Bob&apos;</span>,\n  <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">&apos;Parr&apos;</span>,\n  <span class=\"hljs-attr\">heroName</span>: <span class=\"hljs-string\">&apos;Mr. Incredible&apos;</span>,\n  <span class=\"hljs-attr\">superPower</span>: <span class=\"hljs-string\">&apos;strength&apos;</span>\n};</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"semicolons\">Semicolons</a></h2>\n<ul>\n<li><p><strong>Yup.</strong></p>\n<pre><span class=\"hljs-comment\">// bad</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&apos;Skywalker&apos;</span>\n  <span class=\"hljs-keyword\">return</span> name\n})()\n\n<span class=\"hljs-comment\">// good</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&apos;Skywalker&apos;</span>;\n  <span class=\"hljs-keyword\">return</span> name;\n})();\n\n<span class=\"hljs-comment\">// good</span>\n;(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&apos;Skywalker&apos;</span>;\n  <span class=\"hljs-keyword\">return</span> name;\n})();</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"type-coercion\">Type Casting &amp; Coercion</a></h2>\n<ul>\n<li>Perform type coercion at the beginning of the statement.</li>\n<li><p>Strings:</p>\n<pre><span class=\"hljs-comment\">//  =&gt; this.reviewScore = 9;</span>\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> totalScore = <span class=\"hljs-keyword\">this</span>.reviewScore + <span class=\"hljs-string\">&apos;&apos;</span>;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> totalScore = <span class=\"hljs-string\">&apos;&apos;</span> + <span class=\"hljs-keyword\">this</span>.reviewScore;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> totalScore = <span class=\"hljs-string\">&apos;&apos;</span> + <span class=\"hljs-keyword\">this</span>.reviewScore + <span class=\"hljs-string\">&apos; total score&apos;</span>;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> totalScore = <span class=\"hljs-keyword\">this</span>.reviewScore + <span class=\"hljs-string\">&apos; total score&apos;</span>;</pre></li>\n<li><p>Use <code>parseInt</code> for Numbers and always with a radix for type casting.</p>\n</li>\n<li><p>If for whatever reason you are doing something wild and <code>parseInt</code> is your bottleneck and need to use Bitshift for <a href=\"http://jsperf.com/coercion-vs-casting/3\">performance reasons</a>, leave a comment explaining why and what you&apos;re doing.</p>\n<pre><span class=\"hljs-keyword\">var</span> inputValue = <span class=\"hljs-string\">&apos;4&apos;</span>;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> val = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Number</span>(inputValue);\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> val = +inputValue;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> val = inputValue &gt;&gt; <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> val = <span class=\"hljs-built_in\">parseInt</span>(inputValue);\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> val = <span class=\"hljs-built_in\">Number</span>(inputValue);\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> val = <span class=\"hljs-built_in\">parseInt</span>(inputValue, <span class=\"hljs-number\">10</span>);\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-comment\">/**\n * parseInt was the reason my code was slow.\n * Bitshifting the String to coerce it to a\n * Number made it a lot faster.\n */</span>\n<span class=\"hljs-keyword\">var</span> val = inputValue &gt;&gt; <span class=\"hljs-number\">0</span>;</pre></li>\n<li><p>Booleans:</p>\n<pre><span class=\"hljs-keyword\">var</span> age = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> hasAge = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Boolean</span>(age);\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> hasAge = <span class=\"hljs-built_in\">Boolean</span>(age);\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> hasAge = !!age;</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"naming-conventions\">Naming Conventions</a></h2>\n<ul>\n<li><p>Avoid single letter names. Be descriptive with your naming.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">q</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// ...stuff...</span>\n}\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">query</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// ..stuff..</span>\n}</pre></li>\n<li><p>Use camelCase when naming objects, functions, and instances</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> OBJEcttsssss = {};\n<span class=\"hljs-keyword\">var</span> this_is_my_object = {};\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">this</span>-is-my-object = {};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">c</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> u = <span class=\"hljs-keyword\">new</span> user({\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&apos;Bob Parr&apos;</span>\n});\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> thisIsMyObject = {};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">thisIsMyFunction</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> user = <span class=\"hljs-keyword\">new</span> User({\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&apos;Bob Parr&apos;</span>\n});</pre></li>\n<li><p>Use PascalCase when naming constructors or classes</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">user</span>(<span class=\"hljs-params\">options</span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.name = options.name;\n}\n\n<span class=\"hljs-keyword\">var</span> bad = <span class=\"hljs-keyword\">new</span> user({\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&apos;nope&apos;</span>\n});\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">User</span>(<span class=\"hljs-params\">options</span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.name = options.name;\n}\n\n<span class=\"hljs-keyword\">var</span> good = <span class=\"hljs-keyword\">new</span> User({\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&apos;yup&apos;</span>\n});</pre></li>\n<li><p>Use a leading underscore <code>_</code> when naming private properties</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">this</span>.__firstName__ = <span class=\"hljs-string\">&apos;Panda&apos;</span>;\n<span class=\"hljs-keyword\">this</span>.firstName_ = <span class=\"hljs-string\">&apos;Panda&apos;</span>;\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">this</span>._firstName = <span class=\"hljs-string\">&apos;Panda&apos;</span>;</pre></li>\n<li><p>When saving a reference to <code>this</code> use <code>_this</code>.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-keyword\">this</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(self);\n  };\n}\n\n<span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> that = <span class=\"hljs-keyword\">this</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(that);\n  };\n}\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> _this = <span class=\"hljs-keyword\">this</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(_this);\n  };\n}</pre></li>\n<li><p>Name your functions. This is helpful for stack traces.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> log = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">msg</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(msg);\n};\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> log = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\">msg</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(msg);\n};</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"accessors\">Accessors</a></h2>\n<ul>\n<li>Accessor functions for properties are not required</li>\n<li><p>If you do make accessor functions use getVal() and setVal(&apos;hello&apos;)</p>\n<pre><span class=\"hljs-comment\">// bad</span>\ndragon.age();\n\n<span class=\"hljs-comment\">// good</span>\ndragon.getAge();\n\n<span class=\"hljs-comment\">// bad</span>\ndragon.age(<span class=\"hljs-number\">25</span>);\n\n<span class=\"hljs-comment\">// good</span>\ndragon.setAge(<span class=\"hljs-number\">25</span>);</pre></li>\n<li><p>If the property is a boolean, use isVal() or hasVal()</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">if</span> (!dragon.age()) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">if</span> (!dragon.hasAge()) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}</pre></li>\n<li><p>It&apos;s okay to create get() and set() functions, but be consistent.</p>\n<pre><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Jedi</span>(<span class=\"hljs-params\">options</span>) </span>{\n  options || (options = {});\n  <span class=\"hljs-keyword\">var</span> lightsaber = options.lightsaber || <span class=\"hljs-string\">&apos;blue&apos;</span>;\n  <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">&apos;lightsaber&apos;</span>, lightsaber);\n}\n\nJedi.prototype.set = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key, val</span>) </span>{\n  <span class=\"hljs-keyword\">this</span>[key] = val;\n};\n\nJedi.prototype.get = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>[key];\n};</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"constructors\">Constructors</a></h2>\n<ul>\n<li><p>Assign methods to the prototype object, instead of overwriting the prototype with a new object. Overwriting the prototype makes inheritance impossible: by resetting the prototype you&apos;ll overwrite the base!</p>\n<pre><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Jedi</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;new jedi&apos;</span>);\n}\n\n<span class=\"hljs-comment\">// bad</span>\nJedi.prototype = {\n  <span class=\"hljs-attr\">fight</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fight</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;fighting&apos;</span>);\n  },\n\n  <span class=\"hljs-attr\">block</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">block</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;blocking&apos;</span>);\n  }\n};\n\n<span class=\"hljs-comment\">// good</span>\nJedi.prototype.fight = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fight</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;fighting&apos;</span>);\n};\n\nJedi.prototype.block = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">block</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;blocking&apos;</span>);\n};</pre></li>\n<li><p>Methods can return <code>this</code> to help with method chaining.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\nJedi.prototype.jump = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.jumping = <span class=\"hljs-literal\">true</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n};\n\nJedi.prototype.setHeight = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">height</span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.height = height;\n};\n\n<span class=\"hljs-keyword\">var</span> luke = <span class=\"hljs-keyword\">new</span> Jedi();\nluke.jump(); <span class=\"hljs-comment\">// =&gt; true</span>\nluke.setHeight(<span class=\"hljs-number\">20</span>) <span class=\"hljs-comment\">// =&gt; undefined</span>\n\n<span class=\"hljs-comment\">// good</span>\nJedi.prototype.jump = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.jumping = <span class=\"hljs-literal\">true</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n};\n\nJedi.prototype.setHeight = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">height</span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.height = height;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n};\n\n<span class=\"hljs-keyword\">var</span> luke = <span class=\"hljs-keyword\">new</span> Jedi();\n\nluke.jump()\n  .setHeight(<span class=\"hljs-number\">20</span>);</pre></li>\n</ul>\n<ul>\n<li><p>It&apos;s okay to write a custom toString() method, just make sure it works successfully and causes no side effects.</p>\n<pre><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Jedi</span>(<span class=\"hljs-params\">options</span>) </span>{\n  options || (options = {});\n  <span class=\"hljs-keyword\">this</span>.name = options.name || <span class=\"hljs-string\">&apos;no name&apos;</span>;\n}\n\nJedi.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getName</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name;\n};\n\nJedi.prototype.toString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&apos;Jedi - &apos;</span> + <span class=\"hljs-keyword\">this</span>.getName();\n};</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"modules\">Modules</a></h2>\n<ul>\n<li>The module should start with a <code>!</code>. This ensures that if a malformed module forgets to include a final semicolon there aren&apos;t errors in production when the scripts get concatenated.</li>\n<li>The file should be named with camelCase, live in a folder with the same name, and match the name of the single export.</li>\n<li>Add a method called noConflict() that sets the exported module to the previous version and returns this one.</li>\n<li><p>Always declare <code>&apos;use strict&apos;;</code> at the top of the module.</p>\n<pre><span class=\"hljs-comment\">// fancyInput/fancyInput.js</span>\n\n!<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">global</span>) </span>{\n<span class=\"hljs-meta\">  &apos;use strict&apos;</span>;\n\n  <span class=\"hljs-keyword\">var</span> previousFancyInput = global.FancyInput;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">FancyInput</span>(<span class=\"hljs-params\">options</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.options = options || {};\n  }\n\n  FancyInput.noConflict = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">noConflict</span>(<span class=\"hljs-params\"></span>) </span>{\n    global.FancyInput = previousFancyInput;\n    <span class=\"hljs-keyword\">return</span> FancyInput;\n  };\n\n  global.FancyInput = FancyInput;\n}(<span class=\"hljs-keyword\">this</span>);</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"jquery\">jQuery</a></h2>\n<ul>\n<li><p>Prefix jQuery object variables with a <code>$</code>.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-keyword\">var</span> sidebar = $(<span class=\"hljs-string\">&apos;.sidebar&apos;</span>);\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-keyword\">var</span> $sidebar = $(<span class=\"hljs-string\">&apos;.sidebar&apos;</span>);</pre></li>\n<li><p>Cache jQuery lookups.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setSidebar</span>(<span class=\"hljs-params\"></span>) </span>{\n  $(<span class=\"hljs-string\">&apos;.sidebar&apos;</span>).hide();\n\n  <span class=\"hljs-comment\">// ...stuff...</span>\n\n  $(<span class=\"hljs-string\">&apos;.sidebar&apos;</span>).css({\n    <span class=\"hljs-string\">&apos;background-color&apos;</span>: <span class=\"hljs-string\">&apos;pink&apos;</span>\n  });\n}\n\n<span class=\"hljs-comment\">// good</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setSidebar</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> $sidebar = $(<span class=\"hljs-string\">&apos;.sidebar&apos;</span>);\n  $sidebar.hide();\n\n  <span class=\"hljs-comment\">// ...stuff...</span>\n\n  $sidebar.css({\n    <span class=\"hljs-string\">&apos;background-color&apos;</span>: <span class=\"hljs-string\">&apos;pink&apos;</span>\n  });\n}</pre></li>\n<li><p>For DOM queries use Cascading <code>$(&apos;.sidebar ul&apos;)</code> or parent &gt; child <code>$(&apos;.sidebar &gt; .ul&apos;)</code>. <a href=\"http://jsperf.com/jquery-find-vs-context-sel/16\">jsPerf</a></p>\n</li>\n<li><p>Use <code>find</code> with scoped jQuery object queries.</p>\n<pre><span class=\"hljs-comment\">// bad</span>\n$(<span class=\"hljs-string\">&apos;.sidebar&apos;</span>, <span class=\"hljs-string\">&apos;ul&apos;</span>).hide();\n\n<span class=\"hljs-comment\">// bad</span>\n$(<span class=\"hljs-string\">&apos;.sidebar&apos;</span>).find(<span class=\"hljs-string\">&apos;ul&apos;</span>).hide();\n\n<span class=\"hljs-comment\">// good</span>\n$(<span class=\"hljs-string\">&apos;.sidebar ul&apos;</span>).hide();\n\n<span class=\"hljs-comment\">// good</span>\n$(<span class=\"hljs-string\">&apos;.sidebar &gt; ul&apos;</span>).hide();\n\n<span class=\"hljs-comment\">// good (slower)</span>\n$sidebar.find(<span class=\"hljs-string\">&apos;ul&apos;</span>);\n\n<span class=\"hljs-comment\">// good (faster)</span>\n$($sidebar[<span class=\"hljs-number\">0</span>]).find(<span class=\"hljs-string\">&apos;ul&apos;</span>);</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"es5\">ECMAScript 5 Compatibility</a></h2>\n<ul>\n<li><p>Refer to <a href=\"https://twitter.com/kangax/\">Kangax</a>&apos;s ES5 <a href=\"http://kangax.github.com/es5-compat-table/\">compatibility table</a></p>\n<p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"testing\">Testing</a></h2>\n<ul>\n<li><p><strong>Yup.</strong></p>\n<pre><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}</pre><p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"performance\">Performance</a></h2>\n<ul>\n<li><a href=\"http://jsperf.com/string-vs-array-concat/2\">String vs Array Concat</a></li>\n<li><a href=\"http://jsperf.com/try-catch-in-loop-cost\">Try/Catch Cost In a Loop</a></li>\n<li><a href=\"http://jsperf.com/bang-function\">Bang Function</a></li>\n<li><a href=\"http://jsperf.com/jquery-find-vs-context-sel/13\">jQuery Find vs Context, Selector</a></li>\n<li><a href=\"http://jsperf.com/innerhtml-vs-textcontent-for-script-text\">innerHTML vs textContent for script text</a></li>\n<li><a href=\"http://jsperf.com/ya-string-concat\">Long String Concatenation</a></li>\n<li><p>Loading...</p>\n<p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"resources\">Resources</a></h2>\n<p><strong>Read This</strong></p>\n<ul>\n<li><a href=\"http://es5.github.com/\">Annotated ECMAScript 5.1</a></li>\n</ul>\n<p><strong>Other Styleguides</strong></p>\n<ul>\n<li><a href=\"http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\">Google JavaScript Style Guide</a></li>\n<li><a href=\"http://docs.jquery.com/JQuery_Core_Style_Guidelines\">jQuery Core Style Guidelines</a></li>\n<li><a href=\"https://github.com/rwldrn/idiomatic.js/\">Principles of Writing Consistent, Idiomatic JavaScript</a></li>\n</ul>\n<p><strong>Other Styles</strong></p>\n<ul>\n<li><a href=\"https://gist.github.com/4135065\">Naming this in nested functions</a> - Christian Johansen</li>\n</ul>\n<p><strong>Books</strong></p>\n<ul>\n<li><a href=\"http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742\">JavaScript: The Good Parts</a> - Douglas Crockford</li>\n<li><a href=\"http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752\">JavaScript Patterns</a> - Stoyan Stefanov</li>\n<li><a href=\"http://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X\">Pro JavaScript Design Patterns</a>  - Ross Harmes and Dustin Diaz</li>\n<li><a href=\"http://www.amazon.com/High-Performance-Web-Sites-Essential/dp/0596529309\">High Performance Web Sites: Essential Knowledge for Front-End Engineers</a> - Steve Souders</li>\n<li><a href=\"http://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680\">Maintainable JavaScript</a> - Nicholas C. Zakas</li>\n<li><a href=\"http://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X\">JavaScript Web Applications</a> - Alex MacCaw</li>\n<li><a href=\"http://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273\">Pro JavaScript Techniques</a> - John Resig</li>\n<li><a href=\"http://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595\">Smashing Node.js: JavaScript Everywhere</a> - Guillermo Rauch</li>\n</ul>\n<p><strong>Blogs</strong></p>\n<ul>\n<li><a href=\"http://dailyjs.com/\">DailyJS</a></li>\n<li><a href=\"http://javascriptweekly.com/\">JavaScript Weekly</a></li>\n<li><a href=\"http://javascriptweblog.wordpress.com/\">JavaScript, JavaScript...</a></li>\n<li><a href=\"http://weblog.bocoup.com/\">Bocoup Weblog</a></li>\n<li><a href=\"http://www.adequatelygood.com/\">Adequately Good</a></li>\n<li><a href=\"http://www.nczonline.net/\">NCZOnline</a></li>\n<li><a href=\"http://perfectionkills.com/\">Perfection Kills</a></li>\n<li><a href=\"http://benalman.com/\">Ben Alman</a></li>\n<li><a href=\"http://dmitry.baranovskiy.com/\">Dmitry Baranovskiy</a></li>\n<li><a href=\"http://dustindiaz.com/\">Dustin Diaz</a></li>\n<li><p><a href=\"http://net.tutsplus.com/?s=javascript\">nettuts</a></p>\n<p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n</li>\n</ul>\n<h2><a name=\"in-the-wild\">In the Wild</a></h2>\n<p>  This is a list of organizations that are using this style guide. Send us a pull request or open an issue and we&apos;ll add you to the list.</p>\n<ul>\n<li><strong>Airbnb</strong>: <a href=\"//github.com/airbnb/javascript\">airbnb/javascript</a></li>\n<li><strong>American Insitutes for Research</strong>: <a href=\"//github.com/AIRAST/javascript\">AIRAST/javascript</a></li>\n<li><strong>How About We</strong>: <a href=\"//github.com/howaboutwe/javascript\">howaboutwe/javascript</a></li>\n<li><strong>MinnPost</strong>: <a href=\"//github.com/MinnPost/javascript\">MinnPost/javascript</a></li>\n<li><strong>Shutterfly</strong>: <a href=\"//github.com/shutterfly/javascript\">shutterfly/javascript</a></li>\n</ul>\n<h2><a name=\"guide-guide\">The JavaScript Style Guide Guide</a></h2>\n<ul>\n<li><a href=\"//github.com/airbnb/javascript/wiki/The-JavaScript-Style-Guide-Guide\">Reference</a></li>\n</ul>\n<h2><a name=\"authors\">Contributors</a></h2>\n<ul>\n<li><a href=\"https://github.com/airbnb/javascript/graphs/contributors\">View Contributors</a></li>\n</ul>\n<h2><a name=\"license\">License</a></h2>\n<p>(The MIT License)</p>\n<p>Copyright (c) 2012 Airbnb</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n&apos;Software&apos;), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:</p>\n<p>The above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED &apos;AS IS&apos;, WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n<p><strong><a href=\"#TOC\">[&#x2B06;]</a></strong></p>\n<h1>};</h1>\n"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/bradatwater/javascript",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/bradatwater",
          "text": "bradatwater"
        }
      ]
    }
  ]
}